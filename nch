#!/usr/bin/env bash

# colors!

RED="\033[0;31m" #red
GREEN="\033[0;32m" #green
YELLOW="\033[0;33m" #yellow
BLUE="\033[0;34m" #blue
PURPLE="\033[0;35m" #purple
CYAN="\033[0;36m" #cyan
MED_GRAY="\033[0;38;2;128;128;128m" #medium gray

# text craziness
BLINK="\033[05m" #blink
RED_BLINK="\033[0;31;5m" #red blink

# text format reset
COLOR_RESET="\033[0m"


base_port=$1
remote_base_port=$2
my_hostname=`echo $3 | sed 's/\.$//g'`

listen_port=`expr $base_port + 1`

nch_dir=/tmp/nch

mkdir -p $nch_dir
publishing_to_ports_file=$nch_dir/${base_port}_publish_to.txt
echo -n "" > $publishing_to_ports_file

listening_on_ports_file=$nch_dir/${base_port}_subscribe_to.txt
echo -n "" > $listening_on_ports_file

listeners=""

listen_file=$nch_dir/hns.txt

function printd {
  echo -e ${MED_GRAY}$@${COLOR_RESET}
}

function listen {
  printd "||| Listening for publish requests on $base_port as $my_hostname"

  # Listen on $base_port for messages,
  nc -kdl $base_port | while IFS= read -r latest; do

    # expect the message to start with a command followed by a space, followed by a body
    command=`echo $latest | awk -F' ' '{print $1}'`
    body=`echo ${latest:${#command}}`

    case $command in
      # Subscription request, expect body to be HOSTNAME,PORT
      SUB)
        hostname=`echo $body | awk -F',' '{print $1}'`
        port=`echo $body | awk -F',' '{print $2}'`
        printd "||| Got a publish to request from $hostname $port"

        publish_to_client $hostname $port

        subscribe_to_client $hostname
        ;;

      # Request list of known hostnames, one per WHOA response message
      # expect body to be hostname of the requester
      WHO)
        send_who_answer $body
        ;;

      # Receiving a response from a WHO request we previously made
      # Expect body to be a hostname of someone that the sender knows
      WHOA)
        printd "||| Got WHOA $body"
        subscribe_to_client $body
        ;;

    esac
  done

  printd "||| Done listening ..."
}

function send_who_answer {
  send_to_host=$1
  while read client; do
    hostname=`echo $client | awk -F',' '{print $1}'`
    if [[ -z "$hostname" &&  -z "$port" ]]; then
      printd "||| WARN: skipping empty parse"
    elif [[ $hostname == $send_to_host ]]; then
      printd "||| DEBUG: Not sending $hostname to $send_to_host"
    else
      printd "||| Sending WHOA to $send_to_host: $hostname"
      echo "WHOA ${hostname}" | nc $send_to_host $remote_base_port &
    fi
  done <$publishing_to_ports_file
}

# Request list of who a client knows
function request_who {
  local their_hostname=$1
  printd "||| Requesting WHO from $their_hostname"
  echo "WHO ${my_hostname}" | nc $their_hostname $remote_base_port &
}

# listen for actual chat messages on a port, which is associated with a
# particular hostname, all msgs on that port are expected to come from that
# hostname
function listen_to_hostname_on_port {
  local hostname=$1
  local use_port=$2
  nc -kdl $use_port | while IFS= read -r message ; do
    echo -e "$YELLOW$hostname$COLOR_RESET @ `date +%H:%M:%S`"
    echo "    ${message}"
  done
  printd "||| Stopped listening to $hostname on $use_port ..."
}

# Subscribe to chat messages from another person, but only if we aren't already
# subscribed to them
function subscribe_to_client {
  local hostname=$1
  local subscrption=`grep "$hostname," $listening_on_ports_file`

  # check if we already have a subscription, only subscribe if we don't already have one
  if [[ -z "${subscrption}" ]]; then
    listen_port=`expr $listen_port + 1`
    local use_port=$listen_port
    echo ${hostname},$use_port >> $listening_on_ports_file
    printd "||| Subscribing to $hostname on $use_port..."
    listen_to_hostname_on_port $hostname $use_port &
    listeners="${listeners}${hostname},${use_port}\n"
    printd "||| Opened listener on $use_port for messages from $hostname..."
    printd "||| Requesting subscription from $hostname on $remote_base_port back to me at $my_hostname,$use_port"
    echo "SUB ${my_hostname},${use_port}" | nc $hostname $remote_base_port
    printd "||| Made sub request $hostname on $remote_base_port back to me at $my_hostname,$use_port"

    # now, ask them who they know
    request_who $hostname
  fi
}

function send_msg {
  hostname=$1
  port=$2
  shift
  shift
  echo ${@} | nc $hostname $port
}


# a publish_to is a hostname and port we remember and send all messages to in
# the future
function publish_to_client {
  hostname=$1
  port=$2
  echo "$hostname,$port" >> $publishing_to_ports_file
  printd "||| Will publish to $hostname at $port"
}

listen &

# Kill all these crazy background nc processes when we geta ctrl-c, etc
trap "trap - SIGTERM && kill -- -$$" SIGINT SIGTERM EXIT

function show_debug_state {
  printd "Publishing to:"
  printd `cat $publishing_to_ports_file`
  printd "Listening to:"
  printd "$listeners"
}

# Keep reading from stdin and publishing messages
while IFS= read -r line; do
  if [[ $line =~ ^\+\+.*$ ]]; then
    hostname=`echo $line | cut -c 3-`
    subscribe_to_client $hostname
  elif [[ $line =~ ^\?\?\?.*$ ]]; then
    show_debug_state
  else
    while read client; do
      hostname=`echo $client | awk -F',' '{print $1}'`
      port=`echo $client | awk -F',' '{print $2}'`
      if [[ -z "$hostname" &&  -z "$port" ]]; then
        printd "skipping empty parse"
      else
        printd "||| Publishing \"$line\" to $hostname $port"
        send_msg $hostname $port $line
      fi
    done <$publishing_to_ports_file
  fi
done

